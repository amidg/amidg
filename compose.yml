services:
  # website dev
  amidg-dev:
    container_name: amidg-dev
    profiles:
      - dev
      - web-dev
    build:
      context: ./portfolio
      dockerfile: Dockerfile
    working_dir: /app
    command: ["sh", "-c", "mv /tmp/node_modules /app && yarn run dev"]
    privileged: true
    ports:
      - "3000:3000"
    volumes:
      - ./portfolio:/app:z
    stop_grace_period: 5s # before SIGKILL

  # blog
  strapi:
    container_name: strapi
    profiles:
      - deploy
    extends:
      file: base.yml
      service: strapi_base
    image: ghcr.io/amidg/strapi:latest
    
  strapi-dev:
    container_name: strapi-dev
    profiles:
      - dev
      - strapi-dev
    extends:
      file: base.yml
      service: strapi_base
    build:
      context: ./blog
      dockerfile: Dockerfile
      target: base
    volumes:
      - ./blog/package.json:/opt/package.json:z
      - ./blog/yarn.lock:/opt/yarn.lock:z
      - ./blog/config:/opt/app/config:z
      - ./blog/src:/opt/app/src:z
      - ./blog/public/uploads:/opt/app/public/uploads:z

  # blog DB
  strapiDB:
    profiles:
      - deploy
      - dev
      - strapi-dev
    container_name: strapiDB
    restart: unless-stopped
    env_file: .env
    image: postgres:17.0-alpine
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      #using a volume
      - strapi-data:/var/lib/postgresql/data/
      # if you want to use a bind folder
      #- ./data:/var/lib/postgresql/data/
    ports:
      - "5433:5432"
    networks:
      - strapi

volumes:
  strapi-data:

networks:
  strapi:
    name: strapi
    driver: bridge
